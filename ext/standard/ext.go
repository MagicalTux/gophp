package standard

import (
	"math"

	"github.com/MagicalTux/goro/core"
	"github.com/MagicalTux/goro/core/phpctx"
	"github.com/MagicalTux/goro/core/phpv"
)

// WARNING: This file is auto-generated. DO NOT EDIT

func init() {
	phpctx.RegisterExt(&phpctx.Ext{
		Name:    "standard",
		Version: core.VERSION,
		Classes: []phpv.ZClass{},
		Functions: map[string]*phpctx.ExtFunction{
			"abs":                      &phpctx.ExtFunction{Func: mathAbs, Args: []*phpctx.ExtFunctionArg{}},
			"acos":                     &phpctx.ExtFunction{Func: mathAcos, Args: []*phpctx.ExtFunctionArg{}},
			"acosh":                    &phpctx.ExtFunction{Func: mathACosh, Args: []*phpctx.ExtFunctionArg{}},
			"array_merge":              &phpctx.ExtFunction{Func: fncArrayMerge, Args: []*phpctx.ExtFunctionArg{}},
			"asin":                     &phpctx.ExtFunction{Func: mathAsin, Args: []*phpctx.ExtFunctionArg{}},
			"asinh":                    &phpctx.ExtFunction{Func: mathAsinh, Args: []*phpctx.ExtFunctionArg{}},
			"atan":                     &phpctx.ExtFunction{Func: mathAtan, Args: []*phpctx.ExtFunctionArg{}},
			"atan2":                    &phpctx.ExtFunction{Func: mathAtan2, Args: []*phpctx.ExtFunctionArg{}},
			"atanh":                    &phpctx.ExtFunction{Func: mathAtanh, Args: []*phpctx.ExtFunctionArg{}},
			"base64_decode":            &phpctx.ExtFunction{Func: fncBase64Decode, Args: []*phpctx.ExtFunctionArg{}},
			"base64_encode":            &phpctx.ExtFunction{Func: fncBase64Encode, Args: []*phpctx.ExtFunctionArg{}},
			"bin2hex":                  &phpctx.ExtFunction{Func: fncBin2hex, Args: []*phpctx.ExtFunctionArg{}},
			"boolval":                  &phpctx.ExtFunction{Func: fncBoolval, Args: []*phpctx.ExtFunctionArg{}},
			"chdir":                    &phpctx.ExtFunction{Func: fncChdir, Args: []*phpctx.ExtFunctionArg{}},
			"constant":                 &phpctx.ExtFunction{Func: constant, Args: []*phpctx.ExtFunctionArg{}},
			"cos":                      &phpctx.ExtFunction{Func: mathCos, Args: []*phpctx.ExtFunctionArg{}},
			"cosh":                     &phpctx.ExtFunction{Func: mathCosh, Args: []*phpctx.ExtFunctionArg{}},
			"decbin":                   &phpctx.ExtFunction{Func: fncDecbin, Args: []*phpctx.ExtFunctionArg{}},
			"dechex":                   &phpctx.ExtFunction{Func: fncDechex, Args: []*phpctx.ExtFunctionArg{}},
			"decoct":                   &phpctx.ExtFunction{Func: fncDecoct, Args: []*phpctx.ExtFunctionArg{}},
			"deg2rad":                  &phpctx.ExtFunction{Func: mathDeg2rad, Args: []*phpctx.ExtFunctionArg{}},
			"die":                      &phpctx.ExtFunction{Func: die, Args: []*phpctx.ExtFunctionArg{}},
			"dirname":                  &phpctx.ExtFunction{Func: fncDirname, Args: []*phpctx.ExtFunctionArg{}},
			"dl":                       &phpctx.ExtFunction{Func: stdFuncDl, Args: []*phpctx.ExtFunctionArg{}},
			"doubleval":                &phpctx.ExtFunction{Func: fncDoubleval, Args: []*phpctx.ExtFunctionArg{}},
			"eval":                     &phpctx.ExtFunction{Func: stdFuncEval, Args: []*phpctx.ExtFunctionArg{}},
			"exit":                     &phpctx.ExtFunction{Func: exit, Args: []*phpctx.ExtFunctionArg{}},
			"exp":                      &phpctx.ExtFunction{Func: mathExp, Args: []*phpctx.ExtFunctionArg{}},
			"expm1":                    &phpctx.ExtFunction{Func: mathExpm1, Args: []*phpctx.ExtFunctionArg{}},
			"extension_loaded":         &phpctx.ExtFunction{Func: stdFunc, Args: []*phpctx.ExtFunctionArg{}},
			"file_exists":              &phpctx.ExtFunction{Func: fncFileExists, Args: []*phpctx.ExtFunctionArg{}},
			"floatval":                 &phpctx.ExtFunction{Func: fncFloatval, Args: []*phpctx.ExtFunctionArg{}},
			"flush":                    &phpctx.ExtFunction{Func: fncFlush, Args: []*phpctx.ExtFunctionArg{}},
			"fmod":                     &phpctx.ExtFunction{Func: mathFmod, Args: []*phpctx.ExtFunctionArg{}},
			"function_exists":          &phpctx.ExtFunction{Func: stdFuncFuncExists, Args: []*phpctx.ExtFunctionArg{}},
			"get_cfg_var":              &phpctx.ExtFunction{Func: stdFuncGetCfgVar, Args: []*phpctx.ExtFunctionArg{}},
			"get_magic_quotes_gpc":     &phpctx.ExtFunction{Func: getMagicQuotesGpc, Args: []*phpctx.ExtFunctionArg{}},
			"get_magic_quotes_runtime": &phpctx.ExtFunction{Func: getMagicQuotesRuntime, Args: []*phpctx.ExtFunctionArg{}},
			"getcwd":                   &phpctx.ExtFunction{Func: fncGetcwd, Args: []*phpctx.ExtFunctionArg{}},
			"getenv":                   &phpctx.ExtFunction{Func: getenv, Args: []*phpctx.ExtFunctionArg{}},
			"gettype":                  &phpctx.ExtFunction{Func: fncGettype, Args: []*phpctx.ExtFunctionArg{}},
			"hrtime":                   &phpctx.ExtFunction{Func: stdFuncHrTime, Args: []*phpctx.ExtFunctionArg{}},
			"hypot":                    &phpctx.ExtFunction{Func: mathHypot, Args: []*phpctx.ExtFunctionArg{}},
			"intval":                   &phpctx.ExtFunction{Func: fncIntval, Args: []*phpctx.ExtFunctionArg{}},
			"is_array":                 &phpctx.ExtFunction{Func: fncIsArray, Args: []*phpctx.ExtFunctionArg{}},
			"is_bool":                  &phpctx.ExtFunction{Func: fncIsBool, Args: []*phpctx.ExtFunctionArg{}},
			"is_double":                &phpctx.ExtFunction{Func: fncIsDouble, Args: []*phpctx.ExtFunctionArg{}},
			"is_float":                 &phpctx.ExtFunction{Func: fncIsFloat, Args: []*phpctx.ExtFunctionArg{}},
			"is_int":                   &phpctx.ExtFunction{Func: fncIsInt, Args: []*phpctx.ExtFunctionArg{}},
			"is_integer":               &phpctx.ExtFunction{Func: fncIsInteger, Args: []*phpctx.ExtFunctionArg{}},
			"is_long":                  &phpctx.ExtFunction{Func: fncIsLong, Args: []*phpctx.ExtFunctionArg{}},
			"is_null":                  &phpctx.ExtFunction{Func: fncIsNull, Args: []*phpctx.ExtFunctionArg{}},
			"is_numeric":               &phpctx.ExtFunction{Func: fncIsNumeric, Args: []*phpctx.ExtFunctionArg{}},
			"is_object":                &phpctx.ExtFunction{Func: fncIsObject, Args: []*phpctx.ExtFunctionArg{}},
			"is_real":                  &phpctx.ExtFunction{Func: fncIsReal, Args: []*phpctx.ExtFunctionArg{}},
			"is_resource":              &phpctx.ExtFunction{Func: fncIsResource, Args: []*phpctx.ExtFunctionArg{}},
			"is_scalar":                &phpctx.ExtFunction{Func: fncIsScalar, Args: []*phpctx.ExtFunctionArg{}},
			"is_string":                &phpctx.ExtFunction{Func: fncIsString, Args: []*phpctx.ExtFunctionArg{}},
			"microtime":                &phpctx.ExtFunction{Func: fncMicrotime, Args: []*phpctx.ExtFunctionArg{}},
			"ob_clean":                 &phpctx.ExtFunction{Func: fncObClean, Args: []*phpctx.ExtFunctionArg{}},
			"ob_end_clean":             &phpctx.ExtFunction{Func: fncObEndClean, Args: []*phpctx.ExtFunctionArg{}},
			"ob_end_flush":             &phpctx.ExtFunction{Func: fncObEndFlush, Args: []*phpctx.ExtFunctionArg{}},
			"ob_flush":                 &phpctx.ExtFunction{Func: fncObFlush, Args: []*phpctx.ExtFunctionArg{}},
			"ob_get_clean":             &phpctx.ExtFunction{Func: fncObGetClean, Args: []*phpctx.ExtFunctionArg{}},
			"ob_get_contents":          &phpctx.ExtFunction{Func: fncObGetContents, Args: []*phpctx.ExtFunctionArg{}},
			"ob_get_flush":             &phpctx.ExtFunction{Func: fncObGetFlush, Args: []*phpctx.ExtFunctionArg{}},
			"ob_get_level":             &phpctx.ExtFunction{Func: fncObGetLevel, Args: []*phpctx.ExtFunctionArg{}},
			"ob_implicit_flush":        &phpctx.ExtFunction{Func: fncObImplicitFlush, Args: []*phpctx.ExtFunctionArg{}},
			"ob_start":                 &phpctx.ExtFunction{Func: fncObStart, Args: []*phpctx.ExtFunctionArg{}},
			"php_sapi_name":            &phpctx.ExtFunction{Func: stdFuncSapiName, Args: []*phpctx.ExtFunctionArg{}},
			"php_uname":                &phpctx.ExtFunction{Func: fncUname, Args: []*phpctx.ExtFunctionArg{}},
			"pi":                       &phpctx.ExtFunction{Func: mathPi, Args: []*phpctx.ExtFunctionArg{}},
			"print_r":                  &phpctx.ExtFunction{Func: fncPrintR, Args: []*phpctx.ExtFunctionArg{}},
			"putenv":                   &phpctx.ExtFunction{Func: putenv, Args: []*phpctx.ExtFunctionArg{}},
			"rawurlencode":             &phpctx.ExtFunction{Func: fncRawurlencode, Args: []*phpctx.ExtFunctionArg{}},
			"set_time_limit":           &phpctx.ExtFunction{Func: fncSetTimeLimit, Args: []*phpctx.ExtFunctionArg{}},
			"sleep":                    &phpctx.ExtFunction{Func: stdFuncSleep, Args: []*phpctx.ExtFunctionArg{}},
			"sprintf":                  &phpctx.ExtFunction{Func: fncSprintf, Args: []*phpctx.ExtFunctionArg{}},
			"str_replace":              &phpctx.ExtFunction{Func: stdStrReplace, Args: []*phpctx.ExtFunctionArg{}},
			"str_rot13":                &phpctx.ExtFunction{Func: fncStrRot13, Args: []*phpctx.ExtFunctionArg{}},
			"strtolower":               &phpctx.ExtFunction{Func: fncStrToLower, Args: []*phpctx.ExtFunctionArg{}},
			"strval":                   &phpctx.ExtFunction{Func: fncStrval, Args: []*phpctx.ExtFunctionArg{}},
			"time":                     &phpctx.ExtFunction{Func: fncTime, Args: []*phpctx.ExtFunctionArg{}},
			"urlencode":                &phpctx.ExtFunction{Func: fncUrlencode, Args: []*phpctx.ExtFunctionArg{}},
			"usleep":                   &phpctx.ExtFunction{Func: stdFuncUsleep, Args: []*phpctx.ExtFunctionArg{}},
			"var_dump":                 &phpctx.ExtFunction{Func: stdFuncVarDump, Args: []*phpctx.ExtFunctionArg{}},
		},
		Constants: map[phpv.ZString]phpv.Val{
			"INF":                 phpv.ZFloat(math.Inf(0)),
			"M_1_PI":              phpv.ZFloat(1 / math.Pi),
			"M_2_PI":              phpv.ZFloat(2 / math.Pi),
			"M_2_SQRTPI":          phpv.ZFloat(2 / math.Sqrt(math.Pi)),
			"M_E":                 phpv.ZFloat(math.E),
			"M_EULER":             phpv.ZFloat(0.57721566490153286061),
			"M_LN2":               phpv.ZFloat(math.Ln2),
			"M_LNPI":              phpv.ZFloat(math.Log(math.Pi)),
			"M_LOG10E":            phpv.ZFloat(math.Log10E),
			"M_LOG2E":             phpv.ZFloat(math.Log2E),
			"M_PHI":               phpv.ZFloat(math.Phi),
			"M_PI":                phpv.ZFloat(math.Pi),
			"M_PI_2":              phpv.ZFloat(math.Pi / 2),
			"M_PI_4":              phpv.ZFloat(math.Pi / 4),
			"M_SQRT1_2":           phpv.ZFloat(1 / math.Sqrt(2)),
			"M_SQRT2":             phpv.ZFloat(math.Sqrt(2)),
			"M_SQRT3":             phpv.ZFloat(math.Sqrt(3)),
			"M_SQRTPI":            phpv.ZFloat(math.Sqrt(math.Pi)),
			"NAN":                 phpv.ZFloat(math.NaN()),
			"PHP_ROUND_HALF_DOWN": phpv.ZInt(2),
			"PHP_ROUND_HALF_EVEN": phpv.ZInt(3),
			"PHP_ROUND_HALF_ODD":  phpv.ZInt(4),
			"PHP_ROUND_HALF_UP":   phpv.ZInt(1),
		},
	})
}
